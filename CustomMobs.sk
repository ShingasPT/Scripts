on script load:

    broadcast "Loading mobs..."

    #Mob 1
    set {-mobs::type::husk::name} to "Husky"
    set {-mobs::type::husk::hp} to 50
    set {-mobs::type::husk::dmg} to 1
    #set {-mobs::type::husk::spawns} to 

    #Mob 2
    set {-mobs::type::skeleton::name} to "Skelly"
    set {-mobs::type::skeleton::hp} to 100
    set {-mobs::type::skeleton::dmg} to 1.5
    #set {-mobs::type::skeleton::spawns} to 

    #Mob 3
    set {-mobs::type::zombie::name} to "Zomby"
    set {-mobs::type::zombie::hp} to 250
    set {-mobs::type::zombie::dmg} to 2
    #set {-mobs::type::zombie::spawns} to 
    
    #Mob Levels for HP Multiplier
    set {-mobs::level::1} to 1.2
    set {-mobs::level::2} to 1.5
    set {-mobs::level::3} to 2

    broadcast "Successfully loaded mobs!"

command test <string>:
    trigger:
        spawn 1 of (arg-1 parsed as entity type) at player
        set {_e} to last spawned entity
        set {_lvl} to getMobLevel()
        set {_hp} to ({-mobs::type::%arg-1%::hp} * {-mobs::level::%{_lvl}%})
        set int tag "custom;CustomID" of nbt of {_e} to (size of {-mobs::spawned::*} + 1)
        set int tag "custom;Level" of nbt of {_e} to {_lvl}
        set tag "custom;Type" of nbt of {_e} to arg-1
        set max health of {_e} to {_hp}
        set health of {_e} to {_hp}
        set display name of {_e} to "&7%{-mobs::type::%arg-1%::name}% &r[&6%{_lvl}%&r] &8| &c%health of {_e}%&7/&c%max health of {_e}%"
        add last spawned entity to {-mobs::spawned::*}

on damage of player:
    tag "CustomID" of nbt of attacker is set
    set damage to {-mobs::type::%type of attacker%::dmg}

on damage of mob:
    int tag "CustomID" of nbt of victim is set
    wait 3 tick
    set display name of victim to "&7%{-mobs::type::%tag ""custom;Type"" of nbt of victim%::name}% &r[&6%int tag "custom;Level" of nbt of victim%&r] &8| &c%health of victim%&7/&c%max health of victim%"

on death of mob:
    int tag "CustomID" of nbt of victim is set
    clear drops
    attacker is a player
    add 1 to {mobKills::%uuid of attacker%}
    send action bar "&a+1 &6Points?" to attacker


function getMobLevel() :: integer:
    set {_chance} to random integer between 1 and 100
    if {_chance} is between 1 and 10:
        return 3
    else if {_chance} is between 11 and 20:
        return 2
    return 1